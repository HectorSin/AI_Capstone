version: '3.8'

services:
  # ===========================================
  # FastAPI 백엔드 서비스
  # ===========================================
  backend:
    build:
      context: ./Back
      dockerfile: Dockerfile
    container_name: capstone_backend
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://capstone_user:capstone_password@postgres:5432/capstone_db}
      - PYTHONPATH=/app
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - NAVER_CLOVA_CLIENT_ID=${NAVER_CLOVA_CLIENT_ID}
      - NAVER_CLOVA_CLIENT_SECRET=${NAVER_CLOVA_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - UPLOAD_DIR=/app/database
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./Back/app:/app/app
      - /home/smart/database:/app/database
      - ./AI:/app/ai_modules  # AI 모듈 마운트
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - capstone_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # ===========================================
  # PostgreSQL 데이터베이스
  # ===========================================
  postgres:
    image: postgres:17-alpine
    container_name: capstone_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-capstone_db}
      POSTGRES_USER: ${POSTGRES_USER:-capstone_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-capstone_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Back/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - capstone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-capstone_user} -d ${POSTGRES_DB:-capstone_db}"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s

  # ===========================================
  # Redis (캐싱 및 세션 관리용)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: capstone_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - capstone_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 5s

volumes:
  postgres_data:
  redis_data:
  # airflow_postgres_data:

networks:
  capstone_network:
    driver: bridge
