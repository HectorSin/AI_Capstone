version: '3.8'

services:
  # ===========================================
  # FastAPI 백엔드 서비스
  # ===========================================
  backend:
    build:
      context: ./Back
      dockerfile: Dockerfile
    container_name: capstone_backend
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql+asyncpg://capstone_user:capstone_password@postgres:5432/capstone_db}
      - PYTHONPATH=/app
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-here}
      - ALGORITHM=${ALGORITHM:-HS256}
      - ACCESS_TOKEN_EXPIRE_MINUTES=${ACCESS_TOKEN_EXPIRE_MINUTES:-30}
      - PERPLEXITY_API_KEY=${PERPLEXITY_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - NAVER_CLOVA_CLIENT_ID=${NAVER_CLOVA_CLIENT_ID}
      - NAVER_CLOVA_CLIENT_SECRET=${NAVER_CLOVA_CLIENT_SECRET}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-10485760}
      - UPLOAD_DIR=${UPLOAD_DIR:-/app/uploads}
      - ALLOWED_ORIGINS=${ALLOWED_ORIGINS:-http://localhost:3000,http://127.0.0.1:3000}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "8000:8000"
    volumes:
      - ./Back/app:/app/app
      - ./Back/uploads:/app/uploads
      - ./AI:/app/ai_modules  # AI 모듈 마운트
    depends_on:
      - postgres
      - redis
    networks:
      - capstone_network
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8000 --reload

  # ===========================================
  # PostgreSQL 데이터베이스
  # ===========================================
  postgres:
    image: postgres:17-alpine
    container_name: capstone_postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-capstone_db}
      POSTGRES_USER: ${POSTGRES_USER:-capstone_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-capstone_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./Back/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - capstone_network
    restart: unless-stopped

  # ===========================================
  # Redis (캐싱 및 세션 관리용)
  # ===========================================
  redis:
    image: redis:7-alpine
    container_name: capstone_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - capstone_network
    restart: unless-stopped

  # ===========================================
  # Apache Airflow 웹서버
  # ===========================================
  airflow-webserver:
    image: apache/airflow:2.8.0
    container_name: capstone_airflow_webserver
    restart: always
    user: "50000:0"  # airflow 사용자 ID 설정
    depends_on:
      - airflow-redis
      - airflow-postgres
    environment:
      &airflow-common-env
      AIRFLOW__CORE__EXECUTOR: LocalExecutor
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@airflow-postgres/airflow
      AIRFLOW__CORE__FERNET_KEY: ''
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
      AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
      AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
      AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
      _PIP_ADDITIONAL_REQUIREMENTS: '-r /opt/airflow/requirements.txt'
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./AI:/opt/airflow/ai_modules  # AI 모듈 마운트
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt  # Airflow requirements
    ports:
      - "8080:8080"
    command: webserver
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - capstone_network

  # ===========================================
  # Apache Airflow 스케줄러
  # ===========================================
  airflow-scheduler:
    image: apache/airflow:2.8.0
    container_name: capstone_airflow_scheduler
    restart: always
    user: "50000:0"  # airflow 사용자 ID 설정
    depends_on:
      - airflow-redis
      - airflow-postgres
    environment:
      <<: *airflow-common-env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./AI:/opt/airflow/ai_modules  # AI 모듈 마운트
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt  # Airflow requirements
    command: scheduler
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type SchedulerJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - capstone_network

  # ===========================================
  # Apache Airflow 워커
  # ===========================================
  airflow-worker:
    image: apache/airflow:2.8.0
    container_name: capstone_airflow_worker
    restart: always
    user: "50000:0"  # airflow 사용자 ID 설정
    depends_on:
      - airflow-redis
      - airflow-postgres
    environment:
      <<: *airflow-common-env
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./AI:/opt/airflow/ai_modules  # AI 모듈 마운트
      - ./airflow/requirements.txt:/opt/airflow/requirements.txt  # Airflow requirements
    command: celery worker
    healthcheck:
      test:
        - "CMD-SHELL"
        - 'celery --app airflow.executors.celery_executor.app inspect ping -d "celery@$${HOSTNAME}"'
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - capstone_network

  # ===========================================
  # Airflow Redis
  # ===========================================
  airflow-redis:
    image: redis:7.2-alpine
    container_name: capstone_airflow_redis
    restart: always
    ports:
      - "6380:6379"  # 다른 포트 사용
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - capstone_network

  # ===========================================
  # Airflow PostgreSQL
  # ===========================================
  airflow-postgres:
    image: postgres:15
    container_name: capstone_airflow_postgres
    restart: always
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - airflow_postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"  # 다른 포트 사용
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    networks:
      - capstone_network

volumes:
  postgres_data:
  redis_data:
  airflow_postgres_data:

networks:
  capstone_network:
    driver: bridge
